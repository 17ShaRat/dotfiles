###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# --------------
# Functions
# --------------
global !p
def printf_expand_args(snip):
	"""
	This will look how many placeholders printf has and adds the separated commas
	at the end.
	"""
	
	# now add so many "," as much as the amount of placeholders
	amount_placeholders = snip.tabstops[1].current_text.count("%")

	output = ""

	# Add the amount of tabstops
	for placeholder_index in range(3, amount_placeholders + 3):
		output += f", ${placeholder_index}"
	
	# convert them into tabstops
	snip.expand_anon(output)

endglobal

# ==============
# Snippets 
# ==============
priority -50

snippet def "#define ..."
#define $1
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fora "for-loop" b
for (${1:var}; ${2:condition}; `!p
if len(t[1]) > 0:
	snip.rv = t[1].split('=')[0].split()[-1]
`++) {
	
	$0
} /* for ($1; $2; `!p if len(t[1]) > 0: snip.rv = t[1].split('=')[0].split()[-1]`++) */
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

post_jump "printf_expand_args(snip)"
snippet "printf" "printf with auto-expand args" wr
printf("$1\n"$2);
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]

def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet head "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}  
* Created:          `date +%m/%d/%y` 
* Description:      ${4:${VISUAL}}
*****************************************************************************/
${0}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet func "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p 
snip.rv = ""
snip >> 2

args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet
# vim:ft=snippets:

# My custom snippets
snippet min "Return minimum of two elements"
${1:data_type} min($1 a, $1 b)
{
	if (a < b)
		return a;
	return b;
}
endsnippet
snippet max "Return maximum of two elements"
${1:data_type} max($1 a, $1 b)
{
	if (a > b)
		return a;
	return b;
}
endsnippet
snippet swap "Swap two elements"
void swap (${1:data_type} *a, $1 *b)
{
	$1 tmp = *a;
	*a = *b;
	*b = tmp;
}
endsnippet
snippet abs "Return Absolute value of a number"
${1:data_type} abs ($1 val)
{
	if (val < 0)
		return (-1 * val);
	return val;
}
endsnippet
snippet ll "long long data type"
#define ll long long
endsnippet 
snippet ull "Unsigned long long" 
#define ull unsigned long long
endsnippet
snippet sc "Snippet for scanf function"
scanf("$1");
endsnippet
snippet sci "Scan an integer input"
scanf("%d", $1);
endsnippet 
snippet sci2 "Scan two integer input"
scanf("%d %d", $1, $2);
endsnippet 
snippet sci3 "Scan three integer input"
scanf("%d %d %d", $1, $2, $3);
endsnippet 
snippet scl "Scan one long input"
scanf("%lld", $1);
endsnippet 
snippet scl2 "Scan two long input"
scanf("%lld %lld", $1, $2);
endsnippet 
snippet scl3 "Scan three long input"
scanf("%lld %lld %lld", $1, $2, $3);
endsnippet 

snippet foi "for loop with i counter"
for(int i = $1; i < $2; i++)
	
endsnippet 
snippet fo1 "for loop starting from 1"
for(int ${1:var} = 1; $1 <= ${2:n}; $1++)
	
endsnippet
snippet scs "take one string input"
scanf("%s", $1);

endsnippet
snippet prime "prime checker in C++"
bool prime(int n)
{
	if(n == 1)
		return false;
	else if (n < 4) return true;
	else if (n % 2 == 0) return false;
	else if (n < 9) return true;
	else if (n % 3 == 0) return false;
	else {
		int r = sqrt(n);
		int f = 5;
		while( f <= r) {
			if (n % f == 0) return false;
			if (n % (f+2) == 0) return false;
			f = f + 6;
		}
	}
	return true;
}
endsnippet
snippet pri1n "print an integer and a newline"
printf("%d\n", $1);
endsnippet
snippet pri2n "print two integesr and a newline"
printf("%d %d\n", $1, $2);
endsnippet
snippet pri3n "print three integers and a newline"
printf("%d %d %d\n", $1, $2, $3);
endsnippet
snippet pri4n "print four integer and a newline"
printf("%d %d %d %d\n", $1, $2, $3, $4);
endsnippet
snippet pri "print an integer and a space"
printf("%d ", $1);
endsnippet
